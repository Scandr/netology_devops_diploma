---
- name: Install container runtime containerd, kubeadm, kubelet, kubectl
  hosts: k8s_cluster
  gather_facts: False
  tasks:
  - name: Swap off
    shell: |
      swapoff -a
  - name: Permanent swap off
    replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'

#  - name: Add Docker apt signing key
#    ansible.builtin.apt_key:
#      url: https://download.docker.com/linux/ubuntu/gpg
#      state: present

  - name: Add containerd apt repo
    block:
      - name: Get docker apt repo key
        ansible.builtin.get_url:
          url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/keyrings/docker.asc

      - name: Get system architecture
        shell:
          cmd: dpkg --print-architecture
        register: sys_arch
      - name: Output sys_arch
        debug:
          var: sys_arch
          verbosity: 0

      - name: Get ubuntu version name
        shell:
          cmd: '. /etc/os-release && echo "$VERSION_CODENAME"'
        register: ubuntu_name
      - name: Output ubuntu_name
        debug:
          var: ubuntu_name
          verbosity: 0

      - name: Add docker apt repo
        ansible.builtin.apt_repository:
          repo: "deb [arch={{ sys_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_name.stdout }} stable"
          state: present

  - name: Install containerd and it's dependencies
    ansible.builtin.apt:
      update_cache: yes
      pkg:
      - ca-certificates
      - apt-transport-https
      - gpg
      - curl
      - gnupg
#      - runc
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - containerd.io
      - golang-go

  - name: Set containerd's config to default
    ansible.builtin.shell:
      cmd: 'containerd config default > /etc/containerd/config.toml'

  - name: Enable systemd cgroup driver in containerd's config
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      line: '    SystemdCgroup = true'
      search_string: 'SystemdCgroup'

  - name: Restart containerd service
    ansible.builtin.service:
      name: containerd
      state: restarted

  - name: Install CNI plugin for containerd (and go as dependency)
    block:
      - name: Clone CNI git repo
        ansible.builtin.git:
          repo: https://github.com/containernetworking/cni.git
          dest: /opt/cni/cni
          single_branch: yes
          version: main
      - name: Clone CNI Plugin git repo
        ansible.builtin.git:
          repo: https://github.com/containernetworking/plugins.git
          dest: /opt/cni/plugins
          single_branch: yes
          version: main
      - name: Add CNI loopback.conf
        ansible.builtin.copy:
          dest: "/etc/cni/net.d/99-loopback.conf"
          content: |
            {
              "cniVersion": "0.2.0",
              "name": "lo",
              "type": "loopback"
            }
      - name: Add CNI 10-containerd-net.conflist
        ansible.builtin.copy:
          dest: "/etc/cni/net.d/10-containerd-net.conflist"
          content: |
            {
             "cniVersion": "1.0.0",
             "name": "containerd-net",
             "plugins": [
               {
                 "type": "bridge",
                 "bridge": "cni0",
                 "isGateway": true,
                 "ipMasq": true,
                 "promiscMode": true,
                 "ipam": {
                   "type": "host-local",
                   "ranges": [
                     [{
                       "subnet": "10.88.0.0/16"
                     }],
                     [{
                       "subnet": "2001:db8:4860::/64"
                     }]
                   ],
                   "routes": [
                     { "dst": "0.0.0.0/0" },
                     { "dst": "::/0" }
                   ]
                 }
               },
               {
                 "type": "portmap",
                 "capabilities": {"portMappings": true},
                 "externalSetMarkChain": "KUBE-MARK-MASQ"
               }
             ]
            }
      - name: Run build plugins script
        ansible.builtin.shell:
          cmd: "./build_linux.sh"
          chdir: /opt/cni/plugins

  - name: Restart containerd service
    ansible.builtin.service:
      name: containerd
      state: restarted

  - name: Add kubernetes apt repo block
    block:
      - name: Get Kubernetes apt repo key
        shell:
          cmd: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      - name: Add Kubernetes apt repo
        ansible.builtin.copy:
          dest: "/etc/apt/sources.list.d/kubernetes.list"
          content: |
            deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /

# This tasks fail with unsigned repo
#      - name: Get Kubernetes apt repo key
#        ansible.builtin.get_url:
#          url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
#          dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
#      - name: Add Kubernetes apt repo
#        ansible.builtin.apt_repository:
#          repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /'
#          state: present

  - name: Install Kubeadm Kubelet and Kubectl
    ansible.builtin.apt:
      update_cache: yes
      pkg:
      - kubelet
      - kubeadm
      - kubectl

- name: Initialize control-plane node
  gather_facts: True
  hosts: kube_control_plane
  environment:
    KUBECONFIG: "/etc/kubernetes/admin.conf"
  vars:
    KUBER_USER: 'ubuntu'
  tasks:

  - name: Run kubeadm init
    ansible.builtin.shell:
#        cmd: 'kubeadm init --pod-network-cidr=192.168.100.0/24'
      cmd: 'kubeadm init  --pod-network-cidr=10.244.0.0/16'
    register: kube_init_result

  - name: Get Canal plugin yaml config
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/canal.yaml
      dest: /etc/kubernetes/canal.yaml

  - name: Deploy a pod network to the cluster
    ansible.builtin.shell:
      cmd: 'kubectl apply -f /etc/kubernetes/canal.yaml'

  - name: Output kube_init_result
    debug:
      var: kube_init_result

#  - name: Extract command
#    set_fact:
#      kube_join1: "{{ kube_init_result.stdout_lines | select('match', 'kubeadm join') }}"
#      kube_join2: "{{ kube_init_result.stdout_lines | select('match', '    --discovery-token-ca-cert-hash') }}"

#  - name: Extract command
#    ansible.builtin.shell: echo "{{ kube_init_result.stdout_lines | select('match', 'kubeadm join') }}{{ kube_init_result.stdout_lines | select('match', '    --discovery-token-ca-cert-hash') }}"
#    register: kube_join

  - name: Extract command
    set_fact:
      kube_join: "{{ kube_init_result.stdout_lines | select('match', 'kubeadm join') }}{{ kube_init_result.stdout_lines | select('match', '\\t--discovery-token-ca-cert-hash') }}"
  - name: Check var kube_join in controle-node playbook
    debug:
      var: kube_join

  - name: Add .kube config to ubuntu user
    ansible.builtin.shell:
      cmd: |
        mkdir -p /home/{{ KUBER_USER }}/.kube
        cp -i /etc/kubernetes/admin.conf /home/{{ KUBER_USER }}/.kube/config
        chown {{ KUBER_USER }}:{{ KUBER_USER }} /home/{{ KUBER_USER }}/.kube/config

#  - name: Add new instance to host group
#    add_host:
#      hostname: "{{ kube_control_plane }}"
#      groupname: launched

  - name: Register dummy host with kube_join variable
    add_host:
      name: "KUBE_JOIN_DUMMY_HOST"
      KUBE_JOIN_CMD: "{{ kube_join }}"

- name: Add worker nodes
  gather_facts: True
  hosts: kube_node
  tasks:
#    - name: Run kubeadm join
#      ansible.builtin.shell:
#      cmd: 'kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>'
  - name: Assign the value to kube_join var
    set_fact:
      kube_join_raw: "{{ hostvars['KUBE_JOIN_DUMMY_HOST']['KUBE_JOIN_CMD'] | replace('\\t', '') | replace('[', '') | replace(']', '') | replace('\\\\', '') }}"
  - name: Check kube_join var
    debug:
      var: "{{ kube_join_raw }}"
  - name: Echo command in shell
    shell:
      cmd: "echo {{ kube_join_raw }}"
    register: kube_join
  - name: Result of echo
    debug:
      var: kube_join.stdout

  - name: Run kube join
    shell:
      cmd: "{{ kube_join.stdout }}"
    register: kube_join_output
  - name: Result kube join
    debug:
      var: kube_join_output.stdout
